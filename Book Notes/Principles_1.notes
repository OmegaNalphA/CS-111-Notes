Systems 

Overview
introduces computer design, systems perspective
systems perspective: think about systems in global/encompassing way

Design Principles throughout, will be marked with ##

#Avoid Excessive Generality#
- If it’s good for everything, it’s good for nothing

1.1 Systems and Complexity
1.1.1 Common Problems of Systems in Many Fields
4 categories of Problems 
1) emergent properties
2) propagation of effects
3) incommensurate scaling
4) trade-offs

1.1.1.1 Emergent properties
EP: not evident in the individual components of system, show up when try to combine
- some things only turn up when a system is built

Jury example, descisions surprise observers 

1.1.1.2 propagation of effects
PE: when small disruption has huge effects down the road
- "There are no small changes in a large system"

1.1.1.3 Incommensurate Scaling
IS: as a system grows in size/speed, not all parts scale at the same time, breaks down
- animals cant suddenly grow larger, since bone arrangement cant support weight in same way

1.1.1.4 trade-offs
TO: limited amount of some x, design challenge is to maximize, avoid waste, allocate in proper places. 

1.1.2 Systems, Components, Interfaces, and Environments
- A system is a set of interconnected components that has an expected behavior observed at the interface with its environment

Under Discussion/No Discussion
System = under Enviro = not 
System = Solar System Enviro = Universe

Interactions btwn system and environment = interface 

Granularity: a component in one system is a entire system in another view

1.1.3 Complexity
5 signs of Complexity
1) large num of components
2) Large num of interconnections
3) Many Irregularities
4) A long description
5) A team of designers, implementers, or maintainers

1.2 Sources of Complexity
- num of requirements designer expects system to meet
- maintaining high utilization

1.2.1 Cascading and Interacting Requirements
- list of reqs. of system show how complex is, now matter how simple reqs. are 

#Principle of escalating complexity#
- Adding a requirement increases complexity out of proportion.

- as number of requirements grows, gets exponentially worse to work

#Avoid Excessive Generality#
- If it’s good for everything, it’s good for nothing

- make features general enough to minimize number of exceptions

- change in environment or requirements could trigger complexity

1.2.2 Maintaining High Utilization 
- whenever a scarce resource is involved, effort to keep utilization high

#The law of diminishing returns#
- The more one improves some measure of goodness, the more effort the next improvement will require.

- Higher utilization, higher complexity exponentially

1.3 COPING WITH COMPLEXITY 1
- modularity, abstraction, layering, and hierarchy

1.3.1 modularity
Divide & Conquer

#The unyielding foundations rule#
- It is easier to change a module than to change the modularity

Change one module at a time, dont need to consider full code 

1.3.2 abstraction
- little to no propagation of effects from one module to another

abstraction: separation of interfce from internals, spec from implementation 
functional modularity: modularity w/ abstraction

#The robustness principle#
- Be tolerant of inputs and strict on outputs.

This is in tension with the =>
#The safety margin principle#
- Keep track of the distance to the cliff, or you may fall over the edge
- track and report out of tolerance errors

1.3.3 layering
- good abstractions minimize number of interconnections
layering: build on set of mechanisms that is already complete (lower layer)
- module of a certain layer only interacts with its peers 

Machine Language (low-level) implements C (higher level)

gates/cells => processor & memory => app programs 

layers are primary organizing technique for data comm networks

1.3.4 hierarchy
- small group of modules assembled into stable, self-contained system, well defined interface

1.3.5 Putting it Back Together: Names Make Connections
- use names to make connections to call other functions
	- hardware bus address same idea
- maximize flexibility by delaying binding till last possible moment

#Decouple modules with indirection#
- Indirection supports replaceability

1.4 COMPUTER SYSTEMS ARE THE SAME BUT DIFFERENT
Different from others by =>
1) The complexity of a computer system is not limited by physical laws.
2) The rate of change of computer system technology is unprecedented

1.4.1 Computer Systems have no Nearby Bounds on Composition
Digital systems are noise-free
- can grow without bounds on noise 
- implemented in bits, range of detection of 1 or 0 greater than expected
	- This discipline is an example of being tolerant of inputs and strict on outputs

Poss. 'Leakiness' of code

= In contrast with other systems, computer systems allow composition to a depth whose first limit is the designer’s ability to understand

1.4.2 d(technology)/dt is Unprecedented
- tech changes way too fast 

#The incommensurate scaling rule#
- Changing any system parameter by a factor of 10 usually requires a new design.

1.5 COPING WITH COMPLEXITY II

1.5.1 Why Modularity, Abstraction, Layering, and Hierarchy aren’t Enough
- designer really needs to know system 
	- often, give and take can't optimize for all cases

1.5.2 Iteration 
- start with simple, working system that meets a small req. 
	- then evolve system slowly 

#Design for iteration#
- You won’t get it right the first time, so make it easy to change

- Take Small Steps
	- dont commit too much, or something huge may break 
- Don't Rush
	- need to plan each Step
- Feedback and Failures 

#Keep digging#
- Complex systems fail for complex reasons

1.5.3 Keep it Simple 
- previous systems give a taste of how great things could be if more features were added.
- the technology has improved so much that cost and performance are not constraints.
- each of the suggested new features has been successfully demonstrated somewhere.
- none of the exceptions or other complications seems by itself to be especially hard to deal with.
- there is fear that a competitor will market a system that has even more features.
- among system designers, arrogance, pride, and overconfidence are more common than clear awareness of the dangers of complexity.

#Adopt sweeping simplifications#
- So you can see what you are doing.

