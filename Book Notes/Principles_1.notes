Systems 

Overview
introduces computer design, systems perspective
systems perspective: think about systems in global/encompassing way

Design Principles throughout, will be marked with ##

#Avoid Excessive Generality#
- If it’s good for everything, it’s good for nothing

1.1 Systems and Complexity
1.1.1 Common Problems of Systems in Many Fields
4 categories of Problems 
1) emergent properties
2) propagation of effects
3) incommensurate scaling
4) trade-offs

1.1.1.1 Emergent properties
EP: not evident in the individual components of system, show up when try to combine
- some things only turn up when a system is built

Jury example, descisions surprise observers 

1.1.1.2 propagation of effects
PE: when small disruption has huge effects down the road
- "There are no small changes in a large system"

1.1.1.3 Incommensurate Scaling
IS: as a system grows in size/speed, not all parts scale at the same time, breaks down
- animals cant suddenly grow larger, since bone arrangement cant support weight in same way

1.1.1.4 trade-offs
TO: limited amount of some x, design challenge is to maximize, avoid waste, allocate in proper places. 

1.1.2 Systems, Components, Interfaces, and Environments
- A system is a set of interconnected components that has an expected behavior observed at the interface with its environment

Under Discussion/No Discussion
System = under Enviro = not 
System = Solar System Enviro = Universe

Interactions btwn system and environment = interface 

Granularity: a component in one system is a entire system in another view

1.1.3 Complexity
5 signs of Complexity
1) large num of components
2) Large num of interconnections
3) Many Irregularities
4) A long description
5) A team of designers, implementers, or maintainers

1.2 Sources of Complexity
- num of requirements designer expects system to meet
- maintaining high utilization

1.2.1 Cascading and Interacting Requirements
- list of reqs. of system show how complex is, now matter how simple reqs. are 

#Principle of escalating complexity#
- Adding a requirement increases complexity out of proportion.

- as number of requirements grows, gets exponentially worse to work

#Avoid Excessive Generality#
- If it’s good for everything, it’s good for nothing

- make features general enough to minimize number of exceptions

- change in environment or requirements could trigger complexity

1.2.2 Maintaining High Utilization 
- whenever a scarce resource is involved, effort to keep utilization high

#The law of diminishing returns#
- The more one improves some measure of goodness, the more effort the next improvement will require.

- Higher utilization, higher complexity exponentially

1.3 COPING WITH COMPLEXITY 1
- modularity, abstraction, layering, and hierarchy

1.3.1 modularity
