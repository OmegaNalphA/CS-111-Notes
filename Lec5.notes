1/30/2017
What can go wrong with a file descriptor?
Went over a ton of different error cases
	- read past EOF
	- step away from keyboard

Dealing with Race Conditions
	- behaviour that depends on timing
	- "No excitement up ur spine, just chills down ur spine"
	- Worst kind of bugs in the world
[bash]
(cat a & cat b) > c
#two cats running at same time, which cat/cpu is faster? Might get a different c each time
(cat>a & cat>b) < c 
#both reading from c, writing to a and b splits c up since they'll grab whatever they can
(apache1 & apache2) >> c
[end]

Example of race condition you might have to deal with
gzip: compression program 

gzip foo.tar, what does it do?
	- reads foo.tar
	- writes foo.tar.gz
	- removes foo.tar
User hits ^C 

[c]
int main(int argc, char** argv){
	int fdk = open("/dev/tty", O_RDONLY | O_NONBLOCK);
	int fdi = open("foo.tar", O_RDONLY);
	int fdo = open("foo.tar.gz", O_WRONLY | O_CREAT | O_TRUNC, 0666);
	do{
		if(read(fdk, &c, 1) == 1 && c ==3){
			unlink("foo.tar.gz");
			return 1;
		}
		n = read(fdi, ... );
		compare();
		write(fdo, ... );
	}while( 0 < n );
	close(fdo);
	unlink("foo.tar");
}
[end]

We can use Polling to solve our issues
	- keep asking about ^C at same point in loop
	- When done right will work but is hassle
	- Downside, have to modify at every loop to check ^C
	- would rather want to separate out job so we dont have to keep modifying

Using Signals!
Goals
	1) signal handler
	2) Uncooperative programs in loops
	3) invalid program illegal instructions
		- SIGILL or floating point exception
		- invalid address FIGSEGV SIGBUS
		- I/O Errors
			- SIGIO
			- SIGPIPE write to pipe but no readers
		- Process
			- SIGCHILD - a child died 
				- used to call waitpid immediately
		- SIGKILL SIGSTOP SIGTSTP SIGCONT -> cannot be caught by handler, !not catchable! (signal nuum 9)

Signals
- change to processes abstract machines
- between any two instructions, a signal can arrive
- a signal handler function is executed
	- this function is specified by the application

[c]
void hadle_control_c(int sig) {
	unlink("foo.tar.gz");
	_exit(126);
}
[end]

Poss race condition here!
	- race condition, could call signal and unlink foo.tar.gz without anything being there
	- Signal arrives after we remove uncompressed file
	- can use special args, SIG_IGN
		- Ignore the signal at that point

[c]
int main(int argc, char** argv){
	int fdk = open("/dev/tty", O_RDONLY | O_NONBLOCK);
	int fdi = open("foo.tar", O_RDONLY);
	int fdo = open("foo.tar.gz", O_WRONLY | O_CREAT | O_TRUNC, 0666);
	do{
		if(read(fdk, &c, 1) == 1 && c ==3){
			unlink("foo.tar.gz");
			return 1;
		}
		n = read(fdi, ... );
		compare();
		write(fdo, ... );
	}while( 0 < n );
	close(fdo);
	signal(SIGINT, SIG_IGN);
	unlink("foo.tar");
}
[end]

critical parts of program
- unlink and say

can handle with sig ignore to signal handler

[c]
signal(SIGINT, SIG_IGN);
//critical part
signal(SIGINT, hadle_control_c);
[end]

user can get mad, seems like ^C is getting ignored
theres another flag, more lightweight that blocks signal but stores it

[c]
what you were blocking = pthread_sigmask(block SIGINT)
//critical part
pthread_sigmask(old set);//^C arrives here
[end]

signal handlers can arrive between machine instructions
Signal handler acts like function call, but will splice into instruction array 

[c]
void handle_signal(int sig){
	FILE *f = fopen("file", "W");
	fprintf(f, "caught signal %d\n", sig);
	fclose(f);
}
[end]

this code has an issue,
- we want to keep signal handlers as simple as possible
- they arent allowed to break anything!

fopen calls malloc, and this is super dangerous
- it modifies the heap data structure

malloc calls take a long time on the stack, is possible to get interrupted in the middle
if malloc gets called again during signal, it will crash

#only call async_signal_safe functions

Signals
+ can manage processes better
+ fixed some robustness & performance issues
- processes are less isolated
- can be signaled at any time => races
- signal handling is notoriously buggy
	- emacs Example

Threads come in
- get rid of memory isolation
- all memory is shared, there is no memory isolation
- threads can communicate
- this makes race conditions crazy
- no need for signals or pipes, threads can pick up info on their own 

Threads share as much as possible
- memory (address sace) as well as code (instruction pointers are different)
- file descriptors
- owner, pid, ppid ...

They don't share 
	- instruction pointers
		- each one must be separate to run properly
		- registers ae separate as well
		- they dont share the stack
		- thread id 
		- errno

Try to keep differences to a minimum, we want them to be super lightweight

The Resource Allocation Problem

8-Core CPU, and 1000 threads what do we do?
- use cpu to run program to schedule cpu